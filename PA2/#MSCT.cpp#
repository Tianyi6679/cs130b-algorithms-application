//
//  main.cpp
//  130b_PA2
//
//  Created by MaTianyi on 5/3/17.
//  Copyright (c) 2017 MaTianyi. All rights reserved.
//

#include <iostream>
#include <cmath>
#include "Ds.h"
using namespace std;

class vertice
{
public:
    vertice(){x=0;y=0;index=0;}
    vertice(double a, double b):x(a),y(b){}
    double x;
    double y;
    int index;
};
class edge
{
public:
    edge(){v1=vertice(); v2=vertice(); d=0;}
    edge(vertice a, vertice b):v1(a), v2(b){d=sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));}
    edge operator = (const edge&other){v1=other.v1; v2=other.v2; d=other.d; return *this;}
    vertice v1;
    vertice v2;
    double d;
};
bool sortbycost(edge x, edge y) {return x.d<y.d;};
bool sortbyindex(edge x, edge y) {if (x.v1.index==y.v1.index) return x.v2.index<y.v2.index; else return x.v1.index<y.v1.index;}
vector<edge> kruskal(edge* edges, const int& numNode, const int& numEdge)
{
    vector<edge> ans;
    vector<edge> Edges(edges, edges+numEdge);
    DisjSets ds(numNode);
    sort(Edges.begin(), Edges.end(), sortbycost);
    for (int i=0; i<numEdge; i++)
    {
        if (ds.find(Edges[i].v1.index) != ds.find(Edges[i].v2.index))
        {
            ans.push_back(Edges[i]);
            ds.unionSets(ds.find(Edges[i].v1.index), ds.find(Edges[i].v2.index));
        }
    }
    sort(ans.begin(),ans.end(),sortbyindex);
    return ans;
};
int main(int argc, const char * argv[]) {
    // insert code here...
    int n,m;
    int a,b;
    double x,y;
    cin>>n;
    vertice* v= new vertice[n];
    for (int i=0; i<n; i++)
    {
        cin>>x>>y;
        v[i].x=x;
        v[i].y=y;
        v[i].index=i;
    }
    cin>>m;
    
    edge* e=new edge[m];
    for (int i=0; i<m; i++)
    {
        cin>>a>>b;
        e[i]=edge(v[a],v[b]);
    }
    vector<edge> ans=kruskal(e, n, m);
    cout<<"MCST:"<<endl;
    for (edge a:ans)
        cout<<a.v1.index<<" "<<a.v2.index<<endl;
    return 0;
}
